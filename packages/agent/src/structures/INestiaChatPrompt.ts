import { IHttpLlmFunction, IHttpResponse } from "@samchon/openapi";

import { INestiaChatFunctionSelection } from "./INestiaChatFunctionSelection";

/**
 * Nestia A.I. chatbot prompt.
 *
 * `INestiaChatPrompt` is an union type of all possible prompts that can
 * be generated by the A.I. chatbot of the {@link NestiaChatAgent} class.
 *
 * @author Jeongho Nam - https://github.com/samchon
 */
export type INestiaChatPrompt =
  | INestiaChatPrompt.IText
  | INestiaChatPrompt.ISelect
  | INestiaChatPrompt.ICancel
  | INestiaChatPrompt.IExecute
  | INestiaChatPrompt.IDescribe;
export namespace INestiaChatPrompt {
  /**
   * Select prompt.
   *
   * Selection prompt about candidate functions to call.
   */
  export interface ISelect {
    kind: "select";

    /**
     * ID of the LLM tool call result.
     */
    id: string;

    /**
     * Functions that have been selected.
     */
    functions: INestiaChatFunctionSelection[];
  }

  /**
   * Cancel prompt.
   *
   * Cancellation prompt about the candidate functions to be discarded.
   */
  export interface ICancel {
    kind: "cancel";

    /**
     * ID of the LLM tool call result.
     */
    id: string;

    /**
     * Functions that have been cancelled.
     */
    functions: INestiaChatFunctionSelection[];
  }

  /**
   * Execute prompt.
   *
   * Execution prompt about the LLM function calling.
   */
  export interface IExecute {
    kind: "execute";
    role: "assistant";

    /**
     * ID of the LLM tool call result.
     */
    id: string;

    /**
     * Target function to call.
     */
    function: IHttpLlmFunction<"chatgpt">;

    /**
     * Arguments of the LLM function calling.
     */
    arguments: object;

    /**
     * Response of the LLM function calling execution.
     */
    response: IHttpResponse;
  }

  /**
   * Description prompt.
   *
   * Description prompt about the return value of the LLM function calling.
   */
  export interface IDescribe {
    kind: "describe";

    /**
     * Executions of the LLM function calling.
     *
     * This prompt describes the return value of them.
     */
    executions: IExecute[];

    /**
     * Description text.
     */
    text: string;
  }

  /**
   * Text prompt.
   */
  export interface IText {
    kind: "text";

    /**
     * Role of the orator.
     */
    role: "assistant" | "user";

    /**
     * The text content.
     */
    text: string;
  }
}
