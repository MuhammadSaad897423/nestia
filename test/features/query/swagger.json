{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://github.com/samchon/nestia",
      "description": "insert your server url"
    }
  ],
  "info": {
    "version": "1.0.0",
    "title": "@samchon/nestia-test",
    "description": "Test program of Nestia",
    "license": {
      "name": "MIT"
    }
  },
  "paths": {
    "/query/typed": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "enforce",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": true
          },
          {
            "name": "values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "name": "atomic",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "type": "null"
                },
                {
                  "type": "string"
                }
              ]
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IQuery.o1"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "query",
          "typed"
        ],
        "x-samchon-controller": "QueryController"
      }
    },
    "/query/nest": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "string",
              "pattern": "^([+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
            },
            "required": false
          },
          {
            "name": "enforce",
            "in": "query",
            "schema": {
              "oneOf": [
                {
                  "const": "false"
                },
                {
                  "const": "true"
                }
              ]
            },
            "required": true
          },
          {
            "name": "atomic",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IQuery.o1"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "query",
          "nest"
        ],
        "x-samchon-controller": "QueryController"
      }
    },
    "/query/individual": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "query",
          "individual"
        ],
        "x-samchon-controller": "QueryController"
      }
    },
    "/query/composite": {
      "get": {
        "tags": [],
        "parameters": [
          {
            "name": "atomic",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "values",
            "in": "query",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "required": false
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "number"
            },
            "required": false
          },
          {
            "name": "enforce",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IQuery.o1"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "query",
          "composite"
        ],
        "x-samchon-controller": "QueryController"
      }
    },
    "/query/body": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IQuery.o1"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/IQuery.o1"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "query",
          "body"
        ],
        "x-samchon-controller": "QueryController"
      }
    },
    "/query/big": {
      "post": {
        "tags": [],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/IBigQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "",
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "$ref": "#/components/schemas/IBigQuery"
                }
              }
            }
          }
        },
        "x-samchon-accessor": [
          "query",
          "big"
        ],
        "x-samchon-controller": "QueryController"
      }
    }
  },
  "components": {
    "schemas": {
      "IQuery.o1": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "number"
          },
          "enforce": {
            "type": "boolean"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "atomic": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          }
        },
        "required": [
          "enforce",
          "atomic"
        ]
      },
      "INestQuery": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "string",
            "pattern": "^([+-]?\\d+(?:\\.\\d+)?(?:[eE][+-]?\\d+)?)$"
          },
          "enforce": {
            "oneOf": [
              {
                "const": "false"
              },
              {
                "const": "true"
              }
            ]
          },
          "atomic": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "enforce",
          "atomic",
          "values"
        ]
      },
      "OmitIQueryatomic": {
        "type": "object",
        "properties": {
          "values": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "number"
          },
          "enforce": {
            "type": "boolean"
          }
        },
        "required": [
          "enforce"
        ],
        "description": "Construct a type with the properties of T except for those in type K."
      },
      "IBigQuery": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer"
          },
          "nullable": {
            "oneOf": [
              {
                "type": "null"
              },
              {
                "type": "integer"
              }
            ]
          }
        },
        "required": [
          "value",
          "nullable"
        ]
      }
    },
    "securitySchemes": {
      "bearer": {
        "type": "apiKey"
      }
    }
  },
  "tags": [],
  "x-samchon-emended": true
}